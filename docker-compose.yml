services:
  order-db:
    image: postgres:17.6
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=postgres
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    networks:
      - backend-labs-network
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    volumes:
      - ./configs/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf
      - order-db-data:/var/lib/postgresql/data/
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
  
  order-pgbouncer:
    image: public.ecr.aws/bitnami/pgbouncer:1.24.1
    depends_on:
      order-db:
        condition: service_healthy
    environment:
      - POSTGRESQL_HOST=order-db
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_USERNAME=user
      - POSTGRESQL_PASSWORD=mypassword
      - PGBOUNCER_IDLE_TRANSACTION_TIMEOUT=60
      - PGBOUNCER_POOL_MODE=transaction
      - PGBOUNCER_SERVER_RESET_QUERY_ALWAYS=0
      - PGBOUNCER_SERVER_LIFETIME=3600
      - PGBOUNCER_SERVER_IDLE_TIMEOUT=60
      - PGBOUNCER_MAX_DB_CONNECTIONS=50
      - PGBOUNCER_MAX_CLIENT_CONN=10000
      - PGBOUNCER_RESERVE_POOL_SIZE=5
      - PGBOUNCER_MIN_POOL_SIZE=2
      - PGBOUNCER_DEFAULT_POOL_SIZE=16
      - PGBOUNCER_IGNORE_STARTUP_PARAMETERS=extra_float_digits
    networks:
      - backend-labs-network
    ports:
      - "15432:6432"
    restart: unless-stopped
    
  order-rabbitmq:
    image: rabbitmq:3.13-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=mypassword
    volumes:
      - order-rabbitmq-data:/var/lib/rabbitmq
    networks:
      - backend-labs-network
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 20s
      timeout: 20s
      retries: 3
  
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    depends_on:
      order-pgbouncer:
        condition: service_started
      order-rabbitmq:
        condition: service_healthy
    environment:
      APP_ENVIRONMENT: "Development"
    # entrypoint: ["./migrate"]
    volumes:
      - ./configs/order-service:/etc/order-service
    ports:
      - "5000:5000"
      - "50051:50051"
    networks:
      - backend-labs-network
    restart: unless-stopped

  order-created-consumer:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    depends_on:
      order-rabbitmq:
        condition: service_healthy
      order-service:
        condition: service_started
    environment:
      APP_ENVIRONMENT: "Development"
    entrypoint: ["./consumer"]
    deploy:
      replicas: 5
    volumes:
      - ./configs/order-service-consumer:/etc/order-service-consumer
    networks:
      - backend-labs-network
    restart: unless-stopped

networks:
  backend-labs-network:
    driver: bridge
  
volumes:
  order-db-data:
  order-rabbitmq-data:
